
Optional을 사용하면 예상치 못한 NullPointerException 예외를 제공되는 메소드로 간단히 회피할 수 있다.
즉, 복잡한 조건문 없이도 널(null)값으로 인해 발생하는 예외를 처리할 수 있게 된다.

1. isPresent() 메소드
 - Boolean 타입
 - Optional 객체가 갑ㅄ을 가지고 있다면 true, 값이 없다면 false 리턴

2. ifPresent() 메소드
 - Void 타입
 - ifPresent()는 Optional 객체가 값을 가지고 있으면 실행 값이 없으면 넘아감

3. orElseGet()

@Controller
spring containner가 처음 뜰때 스프링 컨테이너란 통이 생기는데 거기다가 넣어두고 관리

연결하는 방법
private final MemberService memberService;

@Autowired
public Member Controller(MemberService memberService) {
   this.memberService = memberService;
}    ---> 생성자를 만들어주고 @Autowired 어노테이션을 달아주면 연결된다.

* 생성자에 @Autowired 가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어준다. 이렇게
 객체 의존관계를 외부에서 넣어주는 것을 DI(Dependency Injection), 의존성 주입이라고 한다.
* 이전 테스트에서는 개발자가 직접 주입했고, 여기서는 @Autowired에 의해 스프링이 주입해준다.

스프링 빈을 등록하는 2가지 방법
   * 컴포넌트 스캔과 자동 의존관계 설정
   * 자바 코드로 직접 스프링 빈 등록하기

컴포넌트 스캔 원리
* Component : 애노테이션이 있으면 스프링 빈으로 자동 등록된다.
* Controller : 컨트롤러가 스프링 빈으로 자동 등록된 이유도 컴포넌트 스캔 때문이다.

@Component 를 포함하는 다음 애노테이션도 스프링 빈으로 자동 등록된다.
* @Controller
* @Service
* @Repository

스프링은 스프링 컨테이너에 스프링 빈을 등록할 때. 기본으로 싱글톤으로 등록한다(유일하게 하나만 등록해서 동유한다) 따아서 같은 스프링 빈이면
모두 같은 인스턴스다. 설정으로 싱글톤이 아니게 설정할 수 있지만, 특별한 경유를 제외하면 대부분 싱글톤을 사용한다.

DI에는 필드주입, setter 주입, 생성자 주입 이렇게 3가지 방법이 있다. 의존관계가 실행중에 동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다.
실무에서는 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용한다. 그리고 정형화 되지 않거나, 상황에 따라
구현 클래스를 변경해야 하면 설정을 통해 스프링 빈으로 등록한다.

주의 : @Autowired를 통한 DI는 helloController, memberService 등과 같이 스프링이 관리하는 객체에서만 동작한다. 스프링 빈으로 등록하지 않고
내가 직접 생성한 객체에서는 동작하지 않는다.






