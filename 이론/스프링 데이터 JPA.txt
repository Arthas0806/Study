스프링 데이터 JPA

스프링 부트와 JPA만 사용해도 개발 생산성이 정말 많이 증가하고, 개발해야할 코드도 확연히 줄어든다.
여기서 스프링 데이터JPA를 사용하면, 기존의 한계를 넘어 마치 마법처럼, 리포지토리에 구현 클래스 없이 인터페이스 만으로 개발이 가능해진다.
그리고 반복 개발 해온 기본 CRUD 기능도 스프링 데이터 JPA가 모두 제공한다

스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이다. 따라서 JAP를 먼저 학습한 후에 스프링 데이터JPA를 학습해야 한다.

인터페이스가 인처페이스를 받을 때는 extends를 사용한다.

스프링 데이터 JPA 제공 기능
* 인터페이스를 통한 기본적인 CRUD
* infdByNma(), findByEmail() 처럼 메서드 이름 만으로 조회 기능 제공
* 체이징 기능 자동 제공

실무에서는 JPA와 스프링 데이터 JPA를 기본으로 사용하고, 복잡한 동적 쿼리는 Querydsl이라는 라이브러리를 사용하면 된다.
Querydsi을 사용하면 쿼리도 자바 코드로 안전하게 작성할 수 있고, 동적 쿼리도 편리하게 작성할 수 있다. 이 조합으로 해결하기 어려운 쿼리는
JPA가 제공하는 네이티브 쿼리를 사용하거나 , 앞서 학습한  스프링 JDBCtEMPLATE 를 사용하면 된다.  

AOP

* AOP가 필요한 상황
* 모든 메소드의 호출 시간을 측정하고 싶다면?
* 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사랑(core concern)
* 회원 가입 시간, 회원 조회 시간을 측정하고 싶다면?

AOP 적용
AOP : Aspect Oriented Programming

 공통 관심 사항 VS 핵심 관심 사항(core concern)분리

선언 @Aspect 어노테이션을 선언한다.
Bean에 등록을 해줘야 하는데 직접 Bean에 등록 하던가 @Component 어노테이션을 달아준다.

@Around 어노테이션으로 타게팅을 할 수 있다



