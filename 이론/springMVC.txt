스프링 MVC 모델 호출순서

1. 웹 브라우저가 웹 애플리케이션 실행을 요청하면, 웹 서버가 그 요청을 받아서 서블릿 컨테이너( ex : 툼캣서버) 에 넘겨준다.
	서블릿 컨테이너는 URL을 확인하여 그 요청을 처리할 서블릿을 찾아서 실행한다.
2. 서블릿은 실제 업무를 처리하는 모델 자바 객체의 메서드를 호출한다.만약 웹 브라우저가 보낸 데이터를 저장하거나 변경해야 한다면 
	그 데이터를 가공하여 VO객체(Value Object)를 생성하고, 모델 객체의 메서드를 호출할 때 인자 값으로 넘긴다.
	모델 객체는 엔터프라이즈 자바빈(EJB: Enterprise JavaBeans)일 수도 있고, 일반 자바 객체(POJO로 된 Service, DAO Objcet)일 수 도 있다.
3. 모델 객체는 JDBC를 사용하여 매개변수로 너어온 값 객체를 DB에 저장하거나, DB로부터 질의 결과를 가져와서 VO객체로 만들어 변환한다.
	서블릿은 모델 객체로부터 반환 받은 값을 JSP에 전달한다.
4. JSP는 서블릿으로 부터 전달받는 값 객체를 참조하여 웹 브라우저가 출력할 결과 화면을 만들고, 
	웹 브라우저에 출력함으로써 요청 처리를 완료한다.

5. 웹 브라우저는 서버로부터 받는 응답 내용을 화면에 출력한다.  

서블릿 : 자바 기반으로 데이터를 동적으로 처리하기 위한 Servlet 클래스의 구현 규칙을 지킨 프로그램이다.


스프링 front controller

프론트 컨트롤러 : RESR API 서블릿들의 공통영역을 합쳐 하나의 서블릿으로 만들어서 컨트롤러가 서블릿 의존성에서 벗어나도록 도와준다

흐름도 : 클라이언트에서 http 요청을 front controller에게 하면 URI로 어떤 controller에게 http요청이 왔는지 확인을 하고 컨트롤러를 호출해 뷰를 부르는방식

패턴 아키텍쳐

Front Controller는 클라이언트가 보낸 요청을 받아서 공통적인 작업을 먼저 수행
Front Controller는 적절한 세부 Controller 에게 작업을 위임
각각의 애플리케이션 Controller 패턴은 인증이나 권한 체크처럼 모든 요청에 대하여 공통적으로 처리해야 하는 로직이 있을 경우
전체적으로 클라이언트의 요청을 중앙 집중적으로 관리하고자 할 경우에 사용 

DIspatcherServlet : 클라이언트의 요청을 받아서 Controller에게 클라이언트의 요청을 전달하고, 리턴 한 결과값을 View 에게 전달하여 알맞은 응답을 생성