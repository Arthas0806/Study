JAVA OOP(객체지향 프로그래밍)

캡슐화(Encapsulation) : 객체 즉, 클래스의 내부 변수와 메소드를 하나로 패키징하는 특징 - (정보은닉의 효과와 간편한 유지보수와 직결된다.)

예제) 접근제어자를 통해 객체의 캡슐화, 은닉화를 구현한다.
public, protected, default, private

상속(Inheritance) : 객체가 다른 객체를 상속받아 상속받은 객체의 요소를 사용하는 것을 의미한다.
자식 객체는 상속된 부모 객체의 은닉화 구성에 따라 정해진 변수, 메소드에 접근할 수 있다. 또한 부모 객체가 추상 객체일 경우 추상 메소드와
오버라이딩(Overriding)을 통해 부모 객체의 메소드를 구현하거나 다룰 수 있다.

* 추상 객체 : 하나 이상의 추상 메소드를 포함하는 객체이다.
* 추상 메소드 : 자식 객체에서 구현해야하는 메소드 / 추상 메소드는 추상 객체를 할당받으려는 객체에서 선언이 이루어진다.
자식 객체에서 구현이 되기 때문에 자식 객체의 변수나 메소드에 직접적으로 접근할 수 있다. 때문에 자식 객체의 요소를 활용해서 동작을 구현해야할 경우
해당 메소드를 추상으로 정의하면 자식 객체의 특성에 맞게 구현하기 용이하다.