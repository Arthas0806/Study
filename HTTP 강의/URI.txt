[URI와 웹 브라우저 요청 흐름]

URI[Uniform Resource Identifier] 
Resource Identifier : 리소스를 식별한다

"URI는 로케이터(locator), 이름(name) 또는 둘 다 추가로 분류될 수 있다.
URI(URL, URN)이 포함되어있다.

URL 리소스가 이 위치에 있다? 라는 뜻
URN 리소스의 이름?

URL(Resource Locator) // foo://example.com:8042/over/there?name=ferret#nose
URN(Resource Name) // urn:example:animal:ferret:nose

foo : scheme / example.com:8042 : autority / over/there : path / name=ferret : query / nose :fragment
urn : scheme / eample:animal:ferret:nose : path

* Uniform : 리소스 식별하는 통일된 방식
* Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음)
* Identifier : 다른 항목과 구분하는데 필요한 정보

URL, URN

* URL - Locator : 리소스가 있는 위치를 지정
* URN - Name : 리소스에 이름을 부여
* 위치는 변할 수 있지만, 이름은 변하지 않는다.
* urn:isbn:8960777331 ( 어떤 책의 isbn URN)
* URN 이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지 않음
* 앞으로 URI를 URL과 같은 의미로 이야기하겠음

URL 전체 문법

* scheme://[userinfo@]host[:port][/path][?query][#fragment]
* httpS://www.google.com:443/search?q=hello&hl=ko

* 프로토콜
* 호스트명(www.google.com)
* 포트 번호(443)
* 패스(/search)
* 쿼리 파라미터(q=hello&hi=ko)

scheme
* 주로 프로토콜 사용
* 프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙
	- 예) http, https, ftp 등등
* http는 80포트, https는 443 포트를 주로 사용, 포트는 생략 가능
* https는 http에 보안 추가(HTTP Secure)

userinfo
* URL에 사용자정보를 포함해서 인증
* 거의 사용하지 않음

PORT
* 접속 포트
* 일반적으로 생략, 생략시 http는 80, https는 443

path
* 리소스 경로(path), 계층적 구조
* 예)
	/home/file1.jpg
	/members
	/members/100,/items/iphone12
	
query
* key=value 형태
* ?로 시작, &로 추가 가능 ?keyA=valueA&keyB=valueB
* query parameto, query string 등으로 불림, 웹서버에 제공하는 파라미터 문자 형태(숫자를 적어도 문자열로 나간다.)

fragment
* html 내부 북마크에 사용
* 서버에 전송하는 정보 아님

웹 브라우저 요청 흐름

https://www.google.com/search?q=hello&hl=ko
1. DNS 서버 조회 IP를 가져온다.
2. HTTP 요청 메시지
3. 패킷으로 감싸서 전송
4. 서버에서 응답메시지를 전송
5. 응답 메시지를 보고 랜더링 해서 화면 출력



