[인터넷 네트워크]

* 인터넷 통신
* IP
* TCP, UDP
* PORT
* DNS


IP 인터넷 프로토콜 역할
- 지정한 IP주소 (IP Address)에 데이터 전달
- 패킷(Packet)이라는 통신 단위로 데이터 전달(출발IP, 도착IP, 등등)
- 메시지를 보낼때 IP패킷이라는 규칙이 있는데 메시지를 IP패킷으로 감싸서 전송한다.
- 이 IP패킷을 보고 노드들이 도착IP쪽으로 이동시킨다.

IP 프로토콜의 한계
* 비연결성
	- 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송 (대상 서버가 패킷을 받을 수 있는 상태인지 모름)
* 비신뢰성
	- 중간에 패킷이 사라지면? (광 케이블이 끊어진다던가 하는 불의의 사고)
	- 패킷이 순서대로 안오면? ( 보내는 메시지가 클때는 한번에 보내지 않고 끊어서 보내는데 노드들이 그때그때 빠른곳으로 보내서 도착을 엉뚱한 순서로 섞여서 도착할 수 있다.
* 프로그램 구분
	- 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면?
	
TCP / UDP

인터넷 프로토콜 스택의 4계층
애플리케이션 계층 - HTTP, FTP
전송 계층 - TCP, UDP
인터넷 계층 - IP
네트워크 인터페이스 계층

순서 (HTTP -> TCP -> IP -> Ethernet frame) 감싸면서 전송한다.

1. 프로그램이 Hello, world! 생성
2. SOCKET 라이브러리를 통해 전달
3. TCP 정보 생성, 메시지 데이터 포함
4. IP 패킷 생성, TCP 데이터 포함

TCP / IP 패킷 정보
출발지 IP, 목적지 IP, 기타.....{
	출발지 PORT, 목적지 PORT 전송제어, 순서, 검증 정보 ...{
		전송 데이터
	}
}
이런식으로 둘러쌓여있다.

TCP 특징
전송 제어 프로토콜(Transmisson Control Protocol)
* 연결 지향 - TCP 3 way handshacke(가상 연결)
* 데이터 전달 보증
* 순서 보장

* 신뢰할 수 있는 프로토콜
* 현재는 대부분 TCP 사용

1. TCP 3 way handshacke - 가상 연결 : 개념적으로만 연결이 된것이다.

Connect, 연결 과정
클라이언트			서버				
1. SYN   ->     				SYN : 접속 요청
2.       <-  SYN + ACK			ACK : 요청 수락
3. ACK   ->						ACK와 함께 데이터 전송 가능

2. 데이터 전달 보증
* 데이터 전송시 데이터를 받은 쪽이 데이터를 받았다고 보내준다.

3. 순서 보장
* 1번 2번 3번 -> 1번 3번 2번 으로 도착했을때는 서버에서 2번 부터 다시 보내라고 전달해준다.

UDP 특징 - 사용자 데이터그램 프로토콜(User Datagram Protocol)
* 하얀 도화지에 비유(기능이 거의 없음)
* 연결지향 - TCP 3 way handshacke X
* 데이터 전달 보증 X
* 순서 보장 X
* 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름
* 정리
	- IP와 거의 같다. + PORT + 체크섬 정도만 추가
	- 애플리케이션에서 추가 작업 필요
	
PORT : 하나의 IP에서 여러 애플리케이션들이 돌아가고 있을때 그 애플리케이션들을 구분할 때 쓴다.
체크섬 : 이 메시지가 맞는지 검증해주는 데이터

포트 : 같은 IP 내에서 프로세스 구분

패킷 정보(TCP/IP)
출발지 IP, PORT
목적지 IP, PORT
	전송데이터
	  ...

PORT
* 0 ~ 65535 할당 가능
* 0 ~ 1023 : 잘 알려진 포트, 사용하지 않는 것이 좋다
	- FTP : 20, 21
	- TELNET : 23
	- HTTP : 80
	- HTTPS : 443

IP의 문제점
* IP는 기억하기 어렵다 IP:100.100.100.1
* IP는 변경될 수 있다.

DNS 도메인 네임 시스템(Domain Name System)
* 전화번호부
* 도메인 명을 IP 주소로 변환

DNS 서버에 IP를 등록을 하고 도메인 명으로 검색을 하면 DNS 서버에서 해당 도메인의 IP를 반환해준다.


